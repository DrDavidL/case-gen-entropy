name: Deploy to Azure Container Instances

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'

env:
  RESOURCE_GROUP: medical-case-generator-rg
  CONTAINER_GROUP_NAME: medical-case-generator
  LOCATION: eastus

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Build and push images to ACR
      run: |
        # Build and push backend
        az acr build \
          --registry ${{ secrets.ACR_NAME }} \
          --image case-generator-backend:${{ github.sha }} \
          --image case-generator-backend:latest \
          --file Dockerfile.backend \
          .
        
        # Build and push frontend  
        az acr build \
          --registry ${{ secrets.ACR_NAME }} \
          --image case-generator-frontend:${{ github.sha }} \
          --image case-generator-frontend:latest \
          --file Dockerfile.frontend \
          .

    - name: Create deployment configuration
      run: |
        cat > deployment.yaml << EOF
        apiVersion: 2021-10-01
        location: ${{ env.LOCATION }}
        name: ${{ env.CONTAINER_GROUP_NAME }}
        properties:
          containers:
          - name: redis
            properties:
              image: redis:7-alpine
              ports:
              - port: 6379
              resources:
                requests:
                  cpu: 0.5
                  memoryInGb: 0.5
              command:
              - redis-server
              - --appendonly
              - "yes"
              
          - name: backend
            properties:
              image: ${{ secrets.ACR_NAME }}.azurecr.io/case-generator-backend:${{ github.sha }}
              ports:
              - port: 8000
                protocol: TCP
              environmentVariables:
              - name: POSTGRES_URL
                secureValue: "${{ secrets.POSTGRES_URL }}"
              - name: OPENAI_API_KEY
                secureValue: "${{ secrets.OPENAI_API_KEY }}"
              - name: REDIS_URL
                value: redis://localhost:6379/0
              resources:
                requests:
                  cpu: 1
                  memoryInGb: 2
                  
          - name: frontend
            properties:
              image: ${{ secrets.ACR_NAME }}.azurecr.io/case-generator-frontend:${{ github.sha }}
              ports:
              - port: 8501
                protocol: TCP
              environmentVariables:
              - name: BACKEND_URL
                value: http://localhost:8000
              resources:
                requests:
                  cpu: 0.5
                  memoryInGb: 1

          osType: Linux
          restartPolicy: Always
          ipAddress:
            type: Public
            ports:
            - protocol: TCP
              port: 8501
            - protocol: TCP  
              port: 8000
            dnsNameLabel: medical-case-gen-${{ github.run_number }}

          imageRegistryCredentials:
          - server: ${{ secrets.ACR_NAME }}.azurecr.io
            username: ${{ secrets.ACR_USERNAME }}
            password: ${{ secrets.ACR_PASSWORD }}

        tags:
          Environment: Production
          Application: MedicalCaseGenerator
          Version: ${{ github.sha }}
        EOF

    - name: Deploy to Azure Container Instances
      run: |
        # Delete existing container group if it exists
        az container delete \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.CONTAINER_GROUP_NAME }} \
          --yes || true
        
        # Create new container group
        az container create \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --file deployment.yaml

    - name: Get deployment info
      run: |
        # Wait for deployment
        sleep 60
        
        # Get FQDN
        FQDN=$(az container show \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.CONTAINER_GROUP_NAME }} \
          --query "ipAddress.fqdn" \
          --output tsv)
        
        echo "ðŸŽ‰ Deployment complete!"
        echo "Frontend URL: http://$FQDN:8501"
        echo "Backend URL: http://$FQDN:8000"
        echo "API Docs: http://$FQDN:8000/docs"